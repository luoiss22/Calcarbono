# Generated by Django 5.1.7 on 2025-03-28 05:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FactorEmision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categoria', models.CharField(max_length=100)),
                ('subcategoria', models.CharField(blank=True, max_length=100)),
                ('descripcion', models.TextField(blank=True)),
                ('valor', models.FloatField()),
                ('unidad', models.CharField(max_length=50)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('fecha_actualizacion', models.DateField(default=django.utils.timezone.now)),
                ('fuente', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'Factor de Emisión',
                'verbose_name_plural': 'Factores de Emisión',
                'ordering': ['-fecha_actualizacion'],
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('tipo', models.CharField(choices=[('PAPEL', 'Papel y Cartón'), ('VIDRIO', 'Vidrio'), ('PLASTICO', 'Plástico'), ('METAL', 'Metal'), ('ORGANICO', 'Orgánico'), ('ELECTRONICO', 'Electrónico'), ('TEXTIL', 'Textil'), ('OTRO', 'Otro')], default='OTRO', max_length=15)),
                ('unidad_medida', models.CharField(default='kg', max_length=10)),
                ('valor_por_unidad', models.FloatField(default=0)),
                ('factor_reduccion_co2', models.FloatField(default=0)),
            ],
            options={
                'verbose_name': 'Material',
                'verbose_name_plural': 'Materiales',
            },
        ),
        migrations.CreateModel(
            name='Recomendacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categoria', models.CharField(choices=[('CONSUMO', 'Consumo'), ('TRANSPORTE', 'Transporte'), ('ENERGIA', 'Energía'), ('RESIDUOS', 'Residuos'), ('RECICLAJE', 'Reciclaje'), ('GENERAL', 'General')], default='GENERAL', max_length=15)),
                ('descripcion', models.TextField()),
                ('impacto_potencial', models.FloatField(default=0)),
                ('nivel_dificultad', models.IntegerField(default=1)),
                ('beneficio_economico_estimado', models.FloatField(default=0)),
            ],
            options={
                'verbose_name': 'Recomendación',
                'verbose_name_plural': 'Recomendaciones',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombre_completo', models.CharField(blank=True, max_length=255)),
                ('fecha_registro', models.DateField(default=django.utils.timezone.now)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('pais', models.CharField(blank=True, max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RegistroHuellaCarbono',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateTimeField(default=django.utils.timezone.now)),
                ('huella_total', models.FloatField(default=0)),
                ('huella_consumo', models.FloatField(default=0)),
                ('huella_transporte', models.FloatField(default=0)),
                ('huella_energia', models.FloatField(default=0)),
                ('huella_residuos', models.FloatField(default=0)),
                ('reduccion_por_reciclaje', models.FloatField(default=0)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Registro de Huella de Carbono',
                'verbose_name_plural': 'Registros de Huella de Carbono',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='DetalleTransporte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('km_vehiculo_gasolina', models.FloatField(default=0)),
                ('km_vehiculo_diesel', models.FloatField(default=0)),
                ('km_vehiculo_hibrido', models.FloatField(default=0)),
                ('km_vehiculo_electrico', models.FloatField(default=0)),
                ('km_autobus', models.FloatField(default=0)),
                ('km_tren_metro', models.FloatField(default=0)),
                ('vuelos_cortos', models.IntegerField(default=0)),
                ('vuelos_medianos', models.IntegerField(default=0)),
                ('vuelos_largos', models.IntegerField(default=0)),
                ('registro_huella', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detalle_transporte', to='miapp.registrohuellacarbono')),
            ],
            options={
                'verbose_name': 'Detalle de Transporte',
                'verbose_name_plural': 'Detalles de Transporte',
            },
        ),
        migrations.CreateModel(
            name='DetalleResiduos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kg_residuos_totales', models.FloatField(default=0)),
                ('kg_compostaje', models.FloatField(default=0)),
                ('registro_huella', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detalle_residuos', to='miapp.registrohuellacarbono')),
            ],
            options={
                'verbose_name': 'Detalle de Residuos',
                'verbose_name_plural': 'Detalles de Residuos',
            },
        ),
        migrations.CreateModel(
            name='DetalleEnergia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consumo_electricidad_kwh', models.FloatField(default=0)),
                ('porcentaje_energia_renovable', models.FloatField(default=0)),
                ('consumo_gas_natural_m3', models.FloatField(default=0)),
                ('consumo_agua_m3', models.FloatField(default=0)),
                ('tipo_calefaccion', models.CharField(choices=[('GAS', 'Gas Natural'), ('ELEC', 'Eléctrica'), ('LEÑA', 'Leña'), ('GASOLEO', 'Gasóleo'), ('BIOMASA', 'Biomasa'), ('NOCALEF', 'Sin Calefacción')], default='NOCALEF', max_length=10)),
                ('consumo_calefaccion', models.FloatField(default=0)),
                ('registro_huella', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detalle_energia', to='miapp.registrohuellacarbono')),
            ],
            options={
                'verbose_name': 'Detalle de Energía',
                'verbose_name_plural': 'Detalles de Energía',
            },
        ),
        migrations.CreateModel(
            name='DetalleConsumo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consumo_carne_roja', models.FloatField(default=0)),
                ('consumo_aves', models.FloatField(default=0)),
                ('consumo_pescado', models.FloatField(default=0)),
                ('consumo_lacteos', models.FloatField(default=0)),
                ('consumo_frutas_verduras', models.FloatField(default=0)),
                ('porcentaje_alimentos_importados', models.FloatField(default=0)),
                ('compras_ropa_nuevas', models.IntegerField(default=0)),
                ('compras_electronicos', models.IntegerField(default=0)),
                ('compras_online', models.IntegerField(default=0)),
                ('registro_huella', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detalle_consumo', to='miapp.registrohuellacarbono')),
            ],
            options={
                'verbose_name': 'Detalle de Consumo',
                'verbose_name_plural': 'Detalles de Consumo',
            },
        ),
        migrations.CreateModel(
            name='RegistroReciclaje',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateTimeField(default=django.utils.timezone.now)),
                ('kg_total_reciclado', models.FloatField(default=0)),
                ('valor_economico_total', models.FloatField(default=0)),
                ('reduccion_co2_total', models.FloatField(default=0)),
                ('registro_huella', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='miapp.registrohuellacarbono')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Registro de Reciclaje',
                'verbose_name_plural': 'Registros de Reciclaje',
                'ordering': ['-fecha'],
            },
        ),
        migrations.CreateModel(
            name='MaterialReciclable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.FloatField(default=0)),
                ('unidad', models.CharField(default='kg', max_length=10)),
                ('valor_economico', models.FloatField(default=0)),
                ('reduccion_co2', models.FloatField(default=0)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='miapp.material')),
                ('registro_reciclaje', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='miapp.registroreciclaje')),
            ],
            options={
                'verbose_name': 'Material Reciclable',
                'verbose_name_plural': 'Materiales Reciclables',
            },
        ),
        migrations.CreateModel(
            name='RecomendacionUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('EN_PROGRESO', 'En Progreso'), ('COMPLETADA', 'Completada'), ('DESCARTADA', 'Descartada')], default='PENDIENTE', max_length=15)),
                ('fecha_asignacion', models.DateTimeField(default=django.utils.timezone.now)),
                ('fecha_implementacion', models.DateTimeField(blank=True, null=True)),
                ('impacto_real', models.FloatField(blank=True, null=True)),
                ('recomendacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='miapp.recomendacion')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recomendación de Usuario',
                'verbose_name_plural': 'Recomendaciones de Usuario',
                'unique_together': {('usuario', 'recomendacion')},
            },
        ),
    ]
